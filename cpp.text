enum class Alignment {
    Good,
    Neutral,
    Evil
};

class SuperpoweredIndividual {
public:
    SuperpoweredIndividual(std::string firstName, std::string lastName, std::string power, Gender gender, Alignment alignment);
    void usePower();
    std::string getFullName() const;
    Gender getGender() const;
    Alignment getAlignment() const;
    // Other methods...

private:
    std::string firstName;
    std::string lastName;
    std::string power;
    Gender gender;
    Alignment alignment;
    // Other attributes...
};

SuperpoweredIndividual::SuperpoweredIndividual(std::string firstName, std::string lastName, std::string power, Gender gender, Alignment alignment)
    : firstName(firstName), lastName(lastName), power(power), gender(gender), alignment(alignment) {
    // Constructor implementation...
}

std::string SuperpoweredIndividual::getFullName() const {
    return firstName + " " + lastName;
}

Gender SuperpoweredIndividual::getGender() const {
    return gender;
}

Alignment SuperpoweredIndividual::getAlignment() const {
    return alignment;
}

void SuperpoweredIndividual::usePower() {
    // Implement power usage logic...
}
